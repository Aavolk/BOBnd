"""
Adapted from https://www.sfu.ca/~ssurjano/index.html

X is a 1xN dimensional array of values with range 0 to 1
noise is the magnitude of a gaussian noise distribution applied to the
    final output.
Y is the function output scaled from ?? to ??
TODO: Scale Y from 0 to 1

"""

import numpy as np
import math
from scipy import optimize


def findSpaceBounds():
    ndSurrogateList = ['ackley', 'griewank', 'levy', 'rastrigin', 'schwefel', 'perm0db',
                       'rotatedHyperEllipsoid', 'sphere', 'sumDifferentPowers', 'trid', 'zakharov',
                       'dixonPrice', 'rosenbrock', 'michalewicz', 'permdb', 'gfunction', 'sobolLevitan', 'bratley',
                       'roosArnold', 'morokoffCaflisch', 'continuousIntegrand', 'cornerPeakIntegrand',
                       'discontinuousIntegrand', 'gaussianPeak']
    dict = {}
    dimensions = [2, 3, 4, 5, 6, 7, 8, 9, 10]

    for surr in ndSurrogateList:
        dict[surr] = {}
        for dim in dimensions:
            dict[surr][dim] = {}
            for bound in ['Min', 'Max']:
                dict[surr][dim][bound] = {
                    'X': [],
                    'Y': []
                }

    for surr in ndSurrogateList:
        for dim in dimensions:
            bnds = []
            for ii in range(dim):
                bnds.append((0,1))
            surrfunc = getattr(ND, surr)

            minfuncs = ['BH', 'DE', 'SH', 'DA', 'DI']


            f = lambda x: surrfunc(x, normY=False)
            result = {}
            result['BH'] = optimize.basinhopping(f, np.random.rand(dim), minimizer_kwargs={'bounds': bnds})
            result['DE'] = optimize.differential_evolution(f, bnds)
            result['SH'] = optimize.shgo(f, bnds)
            result['DA'] = optimize.dual_annealing(f, bnds)
            result['DI'] = optimize.direct(f, bnds)

            bestfun = 'BH'
            for minfunc in minfuncs:
                if result[minfunc].fun < result[bestfun].fun:
                    bestfun = minfunc

            print('\n', surr, dim, 'min', bestfun)
            for minfunc in minfuncs:
                print(minfunc, result[minfunc].fun)

            dict[surr][dim]['Min']['X'] = [x for x in result[bestfun].x]
            dict[surr][dim]['Min']['Y'] = result[bestfun].fun


            f = lambda x: (-1)*surrfunc(x, normY=False)
            result = {}
            result['BH'] = optimize.basinhopping(f, np.random.rand(dim), minimizer_kwargs={'bounds': bnds})
            result['DE'] = optimize.differential_evolution(f, bnds)
            result['SH'] = optimize.shgo(f, bnds)
            result['DA'] = optimize.dual_annealing(f, bnds)
            result['DI'] = optimize.direct(f, bnds)

            bestfun = 'BH'
            for minfunc in minfuncs:
                if result[minfunc].fun < result[bestfun].fun:
                    bestfun = minfunc

            print('\n', surr, dim, 'max', bestfun)
            for minfunc in minfuncs:
                print(minfunc, result[minfunc].fun)

            dict[surr][dim]['Max']['X'] = [x for x in result[bestfun].x]
            dict[surr][dim]['Max']['Y'] = -result[bestfun].fun


        print(dict)
    return dict




def getBounds(surrogate, dim):

    dict = {'ackley': {2: {'Min': {'X': [0.0062487186463950775, 0.006248718646902265], 'Y': -22.342987592188962}, 'Max': {'X': [0.5, 0.5], 'Y': -4.440892098500626e-16}}, 3: {'Min': {'X': [0.9937512717100151, 0.9937512713297708, 0.9937512717053602], 'Y': -22.34298759218907}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 4: {'Min': {'X': [0.006248718656226436, 0.006248718646923399, 0.006248718646758916, 0.9937512713425035], 'Y': -22.342987592188962}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 5: {'Min': {'X': [0.006248718627177439, 0.006248718648865134, 0.006248718644510747, 0.9937512713363916, 0.99375127134587], 'Y': -22.34298759218896}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 6: {'Min': {'X': [0.9938271604938271, 0.9938271604938271, 0.9938271604938271, 0.9938271604938271, 0.9938271604938271, 0.9938271604938271], 'Y': -22.34271989812117}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 7: {'Min': {'X': [0.006248718651736211, 0.9937512713702996, 0.006248718651968169, 0.9937512713524039, 0.006248718649002514, 0.0062487186940475455, 0.9937512713694834], 'Y': -22.34298759218897}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 8: {'Min': {'X': [0.9937513073886093, 0.006248682639302451, 0.006248682629951095, 0.0062486827038706035, 0.006248682626300046, 0.9937513073809482, 0.9812512741502735, 0.0062486826499330685], 'Y': -22.342801999175368}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 9: {'Min': {'X': [0.9937513033273596, 0.9937513033451687, 0.9812512702229885, 0.006248686661255465, 0.006248686668348449, 0.006248686676734065, 0.9937513033545649, 0.9937513033264888, 0.9937513033426121], 'Y': -22.342822876961165}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}, 10: {'Min': {'X': [0.006248660387346211, 0.9937513306728946, 0.006248660381046696, 0.006248660385246424, 0.006248660387041135, 0.018748694171134863, 0.993751333207849, 0.006248665965794661, 0.9937513296142048, 0.9812512958376909], 'Y': -22.34268813306466}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -4.440892098500626e-16}}}, 'griewank': {2: {'Min': {'X': [0.9976714254263408, 0.9999915324560957], 'Y': -181.10544133760706}, 'Max': {'X': [0.500000000005856, 0.50000000001125], 'Y': -0.0}}, 3: {'Min': {'X': [0.9977391657775745, 0.9999745973682873, 0.0003302342122644178], 'Y': -270.8156249045552}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': -0.0}}, 4: {'Min': {'X': [1.0, 1.0, 0.0, 0.999298846890953], 'Y': -361.0318791323701}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 5: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 0.0], 'Y': -450.9959786735093}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 6: {'Min': {'X': [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], 'Y': -540.995996902623}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 7: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0], 'Y': -630.9966603886322}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 8: {'Min': {'X': [1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0], 'Y': -720.9997513283355}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 9: {'Min': {'X': [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], 'Y': -810.99987885023}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 10: {'Min': {'X': [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], 'Y': -900.9999607771135}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}}, 'levy': {2: {'Min': {'X': [0.0, 0.0], 'Y': -175.14061790369217}, 'Max': {'X': [0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 3: {'Min': {'X': [0.0, 0.0, 0.0], 'Y': -254.89842685553828}, 'Max': {'X': [0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 4: {'Min': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': -334.65623580738435}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -414.4140447592304}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 6: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -494.1718537110765}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -573.9296626629226}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -653.6874716147687}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -733.4452805666148}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -813.2030895184608}, 'Max': {'X': [0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55], 'Y': -1.4997597826618576e-32}}}, 'rastrigin': {2: {'Min': {'X': [0.058301395446497505, 0.9416985945683204], 'Y': -80.7065803876769}, 'Max': {'X': [0.500000000304249, 0.5000000001553764], 'Y': -0.0}}, 3: {'Min': {'X': [0.9416985945805484, 0.9416985945301312, 0.05830139544776492], 'Y': -121.05987058151536}, 'Max': {'X': [0.49999999983009247, 0.4999999999490581, 0.4999999997940311], 'Y': -0.0}}, 4: {'Min': {'X': [0.05830139546396732, 0.941698594552059, 0.9416985945774677, 0.058301395477121196], 'Y': -161.41316077535382}, 'Max': {'X': [0.5000000001039715, 0.500000000452612, 0.5000000000490311, 0.49999999989133176], 'Y': -0.0}}, 5: {'Min': {'X': [0.058301395865088, 0.05830139566423418, 0.05830139541109541, 0.05830139584994352, 0.9416985943843799], 'Y': -201.76645096919242}, 'Max': {'X': [0.5000000000293912, 0.4999999999101273, 0.4999999998049645, 0.5000000001979353, 0.5000000002475624], 'Y': -0.0}}, 6: {'Min': {'X': [0.058301398189719605, 0.9416985937650372, 0.05830140159765218, 0.05830139897193687, 0.05830139670393636, 0.941698590112472], 'Y': -242.11974116303077}, 'Max': {'X': [0.499999999820626, 0.4999999999804037, 0.4999999996932715, 0.5000000002935949, 0.49999999997613037, 0.5000000000355508], 'Y': 0.0}}, 7: {'Min': {'X': [0.058301395492291574, 0.058301395444034156, 0.05830139537909671, 0.9416985943248688, 0.9416985944680509, 0.9416985926289786, 0.05830139636340623], 'Y': -282.4730313568688}, 'Max': {'X': [0.5000000003278433, 0.500000000126583, 0.4999999997243287, 0.5000000003431142, 0.5000000003962491, 0.49999999953083873, 0.5000000005218407], 'Y': -0.0}}, 8: {'Min': {'X': [0.9416985945985009, 0.05830139540537542, 0.05830139539282911, 0.05830139541157027, 0.9416985944891385, 0.05830139542853499, 0.05830139534547941, 0.058301395337382156], 'Y': -322.8263215507075}, 'Max': {'X': [0.5000000002375083, 0.49999999984523974, 0.4999999998995685, 0.4999999997127509, 0.5000000002827543, 0.4999999997052979, 0.4999999999617946, 0.4999999998996002], 'Y': 0.0}}, 9: {'Min': {'X': [0.058301395424449835, 0.05830139547020087, 0.05830139537012815, 0.05830139540632818, 0.05830139534224199, 0.05830139534202615, 0.9416985945644751, 0.9416985945901778, 0.9416985945841343], 'Y': -363.179611744546}, 'Max': {'X': [0.5000000002842357, 0.4999999999430306, 0.49999999979086823, 0.49999999996870786, 0.5000000003655518, 0.500000000116667, 0.5000000003896223, 0.4999999997670545, 0.5000000001212952], 'Y': 0.0}}, 10: {'Min': {'X': [0.9416985944743298, 0.05830139532324935, 0.058301395331978624, 0.058301395417053294, 0.05830139539674923, 0.05830139534107244, 0.9416985944099118, 0.9416985946337681, 0.058301395403450786, 0.9416985945498726], 'Y': -403.5329019383844}, 'Max': {'X': [0.49999999987124505, 0.5000000001225632, 0.5000000003998677, 0.4999999999287333, 0.4999999997314197, 0.500000000356108, 0.5000000003779047, 0.5000000003191709, 0.5000000005633646, 0.4999999999814446], 'Y': -0.0}}}, 'schwefel': {2: {'Min': {'X': [0.07903125469764119, 0.07903125204642747], 'Y': -1675.9315745448669}, 'Max': {'X': [0.9209687423613417, 0.9209687419693816], 'Y': -2.545513711993408e-05}}, 3: {'Min': {'X': [0.07903125161115171, 0.0790312522112231, 0.0790312469453512], 'Y': -2513.8973618172945}, 'Max': {'X': [0.9209687414145432, 0.9209687413650189, 0.9209687412840022], 'Y': -3.8182708294698386e-05}}, 4: {'Min': {'X': [0.0790312485983992, 0.07903124864071676, 0.07903124861097663, 0.07903124862416892], 'Y': -3351.863149089722}, 'Max': {'X': [0.92096874145726, 0.9209687414403668, 0.9209687414616716, 0.9209687413738199], 'Y': -5.0910277423099615e-05}}, 5: {'Min': {'X': [0.07903124899383131, 0.07903124856962614, 0.07903124888412909, 0.07903124863745624, 0.07903124883672703], 'Y': -4189.828936362153}, 'Max': {'X': [0.9209687414192734, 0.9209687413964125, 0.9209687413412163, 0.920968741446564, 0.9209687413538293], 'Y': -6.363784723362187e-05}}, 6: {'Min': {'X': [0.0790312484671856, 0.07903124858170137, 0.07903124945286327, 0.07903124850226059, 0.07903124862669113, 0.079031248672377], 'Y': -5027.7947236345835}, 'Max': {'X': [0.9209687414411475, 0.9209687414001726, 0.9209687416177513, 0.9209687413124884, 0.9209687415365895, 0.9209687414519285], 'Y': -7.636541567990207e-05}}, 7: {'Min': {'X': [0.07903124892211946, 0.07903124889978928, 0.07903124880938411, 0.0790312486529654, 0.07903124901775765, 0.07903124892487141, 0.0790312487410981], 'Y': -5865.7605109070155}, 'Max': {'X': [0.9209687413054585, 0.9209687414347445, 0.9209687411532866, 0.9209687413078069, 0.9209687413963564, 0.9209687413189073, 0.9209687413249444], 'Y': -8.909298594517168e-05}}, 8: {'Min': {'X': [0.0790312488219483, 0.07903124863725375, 0.0790312465879963, 0.07903124885898508, 0.07903125043720155, 0.07903124865557225, 0.0790312489422348, 0.07903124869424437], 'Y': -6703.726298179444}, 'Max': {'X': [0.9209687414017267, 0.9209687413656598, 0.9209687414834975, 0.9209687414222303, 0.9209687413761001, 0.9209687413470837, 0.9209687413685066, 0.9209687414817399], 'Y': -0.00010182055484619923}}, 9: {'Min': {'X': [0.0790312487443491, 0.07903124863974707, 0.07903124850662253, 0.07903124853673121, 0.079031248444002, 0.07903124872458922, 0.07903124870922473, 0.0790312486186175, 0.07903124872946633], 'Y': -7541.692085451874}, 'Max': {'X': [0.920968741361463, 0.9209687413616341, 0.920968741270089, 0.9209687413208432, 0.9209687414085108, 0.9209687414076432, 0.9209687413612686, 0.920968741319833, 0.9209687413979812], 'Y': -0.00011454812420197413}}, 10: {'Min': {'X': [0.07903124957569718, 0.07903124712003687, 0.07903125198061772, 0.07903124866624302, 0.07903124919521899, 0.07903124924098008, 0.07903124886039026, 0.07903124947418531, 0.07903124798165946, 0.07903124930119063], 'Y': -8379.65787272431}, 'Max': {'X': [0.92096874139269, 0.9209687416440174, 0.9209687413031848, 0.9209687413184291, 0.9209687413794938, 0.9209687413526128, 0.920968741336351, 0.9209687414477438, 0.9209687414387983, 0.9209687412888473], 'Y': -0.00012727569355774904}}}, 'perm0db': {2: {'Min': {'X': [0.0, 0.0], 'Y': -10053.0}, 'Max': {'X': [0.6195652173913044, 0.7445652173913043], 'Y': -7.099748146989106e-30}}, 3: {'Min': {'X': [0.0, 0.0, 0.0], 'Y': -1082122.1608367627}, 'Max': {'X': [0.557849457107778, 0.6639301888301711, 0.5732345585698418], 'Y': -3.796393106376119e-30}}, 4: {'Min': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': -174523195.49211514}, 'Max': {'X': [0.6250058119022279, 0.5403515825023772, 0.5617864078201175, 0.5315471809554817], 'Y': -4.557575031627887e-11}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -42982775405.90347}, 'Max': {'X': [0.5999996239006169, 0.5500186974817292, 0.5246852014219909, 0.5329916087416259, 0.520021529405625], 'Y': -2.962755911254167e-10}}, 6: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -14689849870060.049}, 'Max': {'X': [0.5833347396975236, 0.5270267625813101, 0.5412274461192685, 0.5183530894029665, 0.5195761874915958, 0.5133825435322926], 'Y': -6.521574634932657e-09}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -6649357090973407.0}, 'Max': {'X': [0.5714292796646133, 0.5090015010857194, 0.5353614670805822, 0.51318876207946, 0.5129605183007142, 0.5150819681734885, 0.522249381142174], 'Y': -2.12146085515851e-08}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -3.847646729148142e+18}, 'Max': {'X': [0.5625001597869843, 0.5166942796272377, 0.5309938723303594, 0.508728012975725, 0.5080049893938514, 0.5186618692420382, 0.5095209285917573, 0.5113996614903422], 'Y': -1.5463871668318229e-09}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -2.769668163429044e+21}, 'Max': {'X': [0.555555503521323, 0.5277883549224429, 0.5085470570225489, 0.5182883158989467, 0.5136795721456685, 0.510759904614754, 0.5069785902884738, 0.506121195068163, 0.5080926457625707], 'Y': -3.993273093600604e-09}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -2.426767676736646e+24}, 'Max': {'X': [0.550000006253826, 0.5058426403372511, 0.5248162415379972, 0.5087341591970918, 0.5137150277596351, 0.5143283609542877, 0.5077119202350905, 0.5052993426202586, 0.5056514622846844, 0.5065317356146629], 'Y': -3.091813617173868e-08}}}, 'rotatedHyperEllipsoid': {2: {'Min': {'X': [1.0, 1.0], 'Y': -12884.901888}, 'Max': {'X': [0.5, 0.5], 'Y': 0.0}}, 3: {'Min': {'X': [1.0, 1.0, 0.0], 'Y': -25769.803776}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': -0.0}}, 4: {'Min': {'X': [0.0, 1.0, 0.0, 1.0], 'Y': -42949.672959999996}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 1.0, 0.0], 'Y': -64424.509439999994}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 6: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 0.0], 'Y': -90194.313216}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 7: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0], 'Y': -120259.08428799998}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 8: {'Min': {'X': [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0], 'Y': -154618.82265599997}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 9: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0], 'Y': -193273.52831999998}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 10: {'Min': {'X': [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0], 'Y': -236223.20127999998}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}}, 'sphere': {2: {'Min': {'X': [1.0, 0.0], 'Y': -52.4288}, 'Max': {'X': [0.5, 0.5], 'Y': -0.0}}, 3: {'Min': {'X': [0.0, 0.0, 0.0], 'Y': -78.64320000000001}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': 0.0}}, 4: {'Min': {'X': [1.0, 0.0, 1.0, 1.0], 'Y': -104.8576}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 1.0], 'Y': -131.072}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 6: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 0.0, 1.0], 'Y': -157.28640000000001}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 7: {'Min': {'X': [1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], 'Y': -183.50080000000003}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 8: {'Min': {'X': [1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -209.71520000000004}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 9: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0], 'Y': -235.92960000000005}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0], 'Y': -262.14400000000006}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}}, 'sumDifferentPowers': {2: {'Min': {'X': [0.0, 1.0], 'Y': -2.0}, 'Max': {'X': [0.5, 0.5], 'Y': 0.0}}, 3: {'Min': {'X': [1.0, 0.0, 0.0], 'Y': -3.0}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': 0.0}}, 4: {'Min': {'X': [1.0, 1.0, 0.0, 0.0], 'Y': -4.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 5: {'Min': {'X': [1.0, 1.0, 0.0, 0.0, 0.0], 'Y': -5.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 6: {'Min': {'X': [1.0, 1.0, 0.0, 1.0, 0.0, 0.0], 'Y': -6.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 7: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0], 'Y': -7.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 8: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0], 'Y': -8.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 9: {'Min': {'X': [1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0], 'Y': -9.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 10: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0], 'Y': -10.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}}, 'trid': {2: {'Min': {'X': [1.0, 0.0], 'Y': -50.0}, 'Max': {'X': [0.749999999107926, 0.7499999990267617], 'Y': 2.0}}, 3: {'Min': {'X': [0.0, 1.0, 0.0], 'Y': -426.0}, 'Max': {'X': [0.6666666667109646, 0.7222222193441119, 0.6666666669990513], 'Y': 6.9999999999999964}}, 4: {'Min': {'X': [0.0, 1.0, 0.0, 1.0], 'Y': -1796.0}, 'Max': {'X': [0.6249999952677846, 0.6874999887275303, 0.6874999895641853, 0.6249999996502417], 'Y': 15.999999999999915}}, 5: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0], 'Y': -5680.0}, 'Max': {'X': [0.5999999879302232, 0.6599999824233179, 0.6799999975990417, 0.6600000008140522, 0.6000000074098653], 'Y': 29.999999999999318}}, 6: {'Min': {'X': [1.0, 0.0, 1.0, 0.0, 1.0, 0.0], 'Y': -14262.0}, 'Max': {'X': [0.5833333178384459, 0.6388888548022507, 0.6666666230938277, 0.6666666169054405, 0.6388888429236661, 0.5833333075974833], 'Y': 49.99999999999534}}, 7: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0], 'Y': -31318.0}, 'Max': {'X': [0.5714285485573444, 0.6224489359576456, 0.6530611788714763, 0.6632652676400401, 0.6530611707948749, 0.62244893886226, 0.5714285563252366], 'Y': 76.99999999998909}}, 8: {'Min': {'X': [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0], 'Y': -61448.0}, 'Max': {'X': [0.562499942516612, 0.6093749200428632, 0.6406249135959686, 0.6562498893054262, 0.6562499158324712, 0.6406249084631037, 0.609374921394097, 0.5624999518294789], 'Y': 111.99999999992974}}, 9: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0], 'Y': -111708.0}, 'Max': {'X': [0.5555554806338803, 0.5987653421116086, 0.6296295256731523, 0.6481480263850754, 0.6543208482616839, 0.6481480248696428, 0.6296295423061115, 0.5987653428753595, 0.5555554855632032], 'Y': 155.9999999998231}}, 10: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], 'Y': -190010.0}, 'Max': {'X': [0.5499999493599976, 0.589999865497479, 0.6199998204342982, 0.6399998072380797, 0.6499998137625891, 0.6499998566111187, 0.639999849915399, 0.6199998593184294, 0.5899998967532821, 0.5499999264957217], 'Y': 209.99999999957072}}}, 'zakharov': {2: {'Min': {'X': [0.0, 1.0], 'Y': -850.0}, 'Max': {'X': [0.5, 0.5], 'Y': -0.0}}, 3: {'Min': {'X': [0.0, 1.0, 1.0], 'Y': -51150.0}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': 0.0}}, 4: {'Min': {'X': [1.0, 1.0, 1.0, 1.0], 'Y': -811300.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 5: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 1.0], 'Y': -6253000.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 6: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -31646850.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 7: {'Min': {'X': [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -121562350.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 8: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -384180400.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}, 9: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -1049793300.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 0.0}}, 10: {'Min': {'X': [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -2562942250.0}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': -0.0}}}, 'dixonPrice': {2: {'Min': {'X': [0.0, 1.0], 'Y': -44221.0}, 'Max': {'X': [0.55, 0.5353553390593274], 'Y': -1.232595164407831e-30}}, 3: {'Min': {'X': [0.0, 0.0, 0.0], 'Y': -132421.0}, 'Max': {'X': [0.55, 0.5353553390593274, 0.470269822124932], 'Y': -7.543482406175925e-30}}, 4: {'Min': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': -264721.0}, 'Max': {'X': [0.55, 0.5353553390593274, 0.529730177875068, 0.4727373066833685], 'Y': -1.3164116355875635e-29}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -441121.0}, 'Max': {'X': [0.55, 0.5353553390593274, 0.529730177875068, 0.5272626933166314, 0.5261068445606853], 'Y': -1.3952977261096646e-29}}, 6: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -661621.0}, 'Max': {'X': [0.55, 0.5353553390593274, 0.529730177875068, 0.5272626933166314, 0.5261068445606853, 0.525547428716353], 'Y': -4.6555119359683775e-29}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'Y': -926221.0}, 'Max': {'X': [0.5499999597518537, 0.535355320055034, 0.529730156748128, 0.5272626724563819, 0.5261068358042306, 0.5255474317010348, 0.47472776584618154], 'Y': -2.6692599724799174e-12}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'Y': -1234921.0}, 'Max': {'X': [0.5499999991504827, 0.5353553051249591, 0.5297301545569115, 0.5272626858791537, 0.5261068345932688, 0.5255474262008396, 0.525272244078114, 0.4748642405520569], 'Y': -6.492350650582255e-12}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'Y': -1587721.0}, 'Max': {'X': [0.5500000562640344, 0.5353553452778185, 0.529730175143292, 0.5272626947188196, 0.5261068525124342, 0.5255474526579715, 0.5252722522350133, 0.525135756047409, 0.5250678011742983], 'Y': -9.368486293214412e-12}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -1984621.0}, 'Max': {'X': [0.5499999224470348, 0.5353552980206299, 0.529730139391236, 0.5272626621243061, 0.526106800219455, 0.5255473768818629, 0.525272189570197, 0.5251357172003233, 0.5250677602531933, 0.5250338498707113], 'Y': -2.479421523768261e-11}}}, 'rosenbrock': {2: {'Min': {'X': [0.0, 0.0], 'Y': -3905.9262268415996}, 'Max': {'X': [0.744140625, 0.744140625], 'Y': -0.0}}, 3: {'Min': {'X': [0.0, 0.0, 0.0], 'Y': -7811.852453683199}, 'Max': {'X': [0.744140625, 0.744140625, 0.744140625], 'Y': 0.0}}, 4: {'Min': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': -11717.7786805248}, 'Max': {'X': [0.744140625, 0.744140625, 0.744140625, 0.744140625], 'Y': 0.0}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -15623.704907366398}, 'Max': {'X': [0.744140625, 0.744140625, 0.744140625, 0.744140625, 0.744140625], 'Y': -0.0}}, 6: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -19529.631134207997}, 'Max': {'X': [0.744140625, 0.744140625, 0.744140625, 0.744140625, 0.744140625, 0.744140625], 'Y': -0.0}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -23435.557361049596}, 'Max': {'X': [0.744140625, 0.744140625, 0.744140625, 0.744140625, 0.744140625, 0.744140625, 0.744140625], 'Y': 0.0}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -27341.483587891194}, 'Max': {'X': [0.7441405685722747, 0.7441405372065123, 0.7441404180697159, 0.7441402207617981, 0.7441397843953741, 0.7441389702627799, 0.7441373567244676, 0.7441341225760246], 'Y': -2.512039830979934e-10}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -31247.409814732793}, 'Max': {'X': [0.7441406250000017, 0.7441406249999984, 0.744140624999998, 0.7441406250000075, 0.7441406250000125, 0.7441406250000289, 0.7441406250000412, 0.7441406250000818, 0.744140625000167], 'Y': -9.284068494805353e-25}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -35153.336041574395}, 'Max': {'X': [0.744140624999304, 0.7441406249997987, 0.7441406249997893, 0.7441406250002858, 0.7441406250001549, 0.7441406249996424, 0.7441406250006638, 0.744140625000875, 0.744140625005465, 0.7441406250106851], 'Y': -3.1642584872975433e-20}}}, 'michalewicz': {2: {'Min': {'X': [1.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.7012066042454314, 0.49999999496188696], 'Y': 1.8013034100985412}}, 3: {'Min': {'X': [0.0, 0.0, 1.0], 'Y': 0.0}, 'Max': {'X': [0.7012066008293, 0.49999999501324843, 0.4090255165592432], 'Y': 2.760394679994535}}, 4: {'Min': {'X': [0.0, 0.0, 1.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.701206595133728, 0.4999999938260293, 0.4090255146747487, 0.6121285179275233], 'Y': 3.698857098466541}}, 5: {'Min': {'X': [0.0, 0.0, 1.0, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.7012066085240809, 0.4999999951256601, 0.4090255159991016, 0.6121285181552477, 0.5476425314882717], 'Y': 4.687658179087973}}, 6: {'Min': {'X': [1.0, 1.0, 0.0, 0.0, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.7011920454724713, 0.4999970787704118, 0.40902553683585, 0.6121285164830148, 0.5476425319168368, 0.5000002329721807], 'Y': 5.687658141479042}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.7012066055805202, 0.500000006382665, 0.4090258826450209, 0.6121285179792969, 0.547642532780322, 0.499999995225052, 0.46295436232765536], 'Y': 6.680885314367117}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.7012078862808255, 0.4999999492533934, 0.40902636521400265, 0.6121285820155483, 0.5476425580365559, 0.49999999669595574, 0.4629544056488796, 0.5589797094989035], 'Y': 7.663757350016292}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.701205981088164, 0.4999999363202209, 0.40902884187882466, 0.6121285181471657, 0.5476425371557656, 0.49999998561010733, 0.4629543159801629, 0.5589796437598955, 0.5270311993608513], 'Y': 8.66015170918501}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.7012065201598524, 0.499999500557097, 0.4090254842972176, 0.6121285001323277, 0.5476425597596576, 0.4999999949717428, 0.4629543419115337, 0.5589796863874416, 0.5270312033365249, 0.5000000098147636], 'Y': 9.660151715531201}}}, 'permdb': {2: {'Min': {'X': [0.0, 0.0], 'Y': -110.5}, 'Max': {'X': [0.75, 1.0], 'Y': 0.0}}, 3: {'Min': {'X': [0.0, 0.0, 0.0], 'Y': -18687.48828125}, 'Max': {'X': [0.6666666666666666, 0.8333333333333334, 1.0], 'Y': -0.0}}, 4: {'Min': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': -809249.4203627494}, 'Max': {'X': [0.6249929743150364, 0.7500055566150053, 0.8749986909331531, 1.0], 'Y': -3.633029257135557e-09}}, 5: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -476712082.0464323}, 'Max': {'X': [0.6011224118598646, 0.6938089227933335, 0.9002677875386653, 0.8010584534379515, 0.9998610468320948], 'Y': -6.507315096623327e-05}}, 6: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -59926724565.70551}, 'Max': {'X': [0.732692239075522, 0.6107161235421108, 0.6019251438663016, 0.9988989696968963, 0.8285867944804632, 0.9210896867680394], 'Y': -0.057686421265265415}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -54981412246712.12}, 'Max': {'X': [0.557840426080212, 0.8226528496537919, 0.8330651645998084, 0.6802956056900702, 0.9999582691013653, 0.6159902811538994, 0.9307589510445137], 'Y': -6.07369764851643}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -1.436345937562679e+16}, 'Max': {'X': [0.926793009471188, 1.0, 0.5845514728489236, 0.3930078232522206, 0.7048369149040182, 0.6427342953348151, 0.8333995938898555, 0.7674659942060218], 'Y': -10862.996395002105}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -1.8226000039671329e+19}, 'Max': {'X': [0.7577040010231839, 0.6660498184222017, 0.5221509546141914, 1.0, 0.5060802009261818, 0.8711220380060058, 0.5543808589035022, 0.9460322143462307, 0.8602794565833394], 'Y': -224522.19589832876}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': -8.262928867285277e+21}, 'Max': {'X': [0.33453396121003226, 0.7183480335282709, 0.7824066513688809, 0.90586026190341, 0.842878169832079, 0.6886588826504059, 0.9486482636699578, 0.6817925729921899, 0.7714979015940844, 1.0], 'Y': -2662581437.2818885}}}, 'gfunction': {2: {'Min': {'X': [0.0, 1.0], 'Y': -6.0}, 'Max': {'X': [0.5000000000010083, 0.0], 'Y': 1.9999999999838671}}, 3: {'Min': {'X': [1.0, 1.0, 0.0], 'Y': -10.0}, 'Max': {'X': [0.49999999999578987, 0.9999999999999418, 0.9999999999999539], 'Y': 3.33333333322043}}, 4: {'Min': {'X': [1.0, 1.0, 1.0, 1.0], 'Y': -15.0}, 'Max': {'X': [0.5000000000000251, 1.0, 0.0, 0.0], 'Y': 4.999999999998996}}, 5: {'Min': {'X': [0.0, 0.0, 1.0, 0.0, 1.0], 'Y': -21.0}, 'Max': {'X': [0.4999999999994935, 1.0, 0.0, 1.0, 0.0], 'Y': 6.999999999971637}}, 6: {'Min': {'X': [0.0, 1.0, 0.0, 1.0, 0.0, 0.0], 'Y': -28.0}, 'Max': {'X': [0.49999999999994116, 0.9999999999973583, 0.9999999999978928, 0.9999999999982413, 0.9999999999984815, 1.3338843472256015e-12], 'Y': 9.333333333197631}}, 7: {'Min': {'X': [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -36.0}, 'Max': {'X': [0.5000000000549399, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], 'Y': 11.999999999944023}}, 8: {'Min': {'X': [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], 'Y': -45.0}, 'Max': {'X': [0.49999999981730625, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'Y': 14.999999978076751}}, 9: {'Min': {'X': [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'Y': -55.0}, 'Max': {'X': [0.4999999998394012, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0], 'Y': 18.33333330977884}}, 10: {'Min': {'X': [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0], 'Y': -66.0}, 'Max': {'X': [0.49999999996938416, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0], 'Y': 21.999999994611613}}}, 'sobolLevitan': {2: {'Min': {'X': [1.0, 1.0], 'Y': -42.05905320526439}, 'Max': {'X': [0.0, 0.0], 'Y': 8.876313629567047}}, 3: {'Min': {'X': [1.0, 1.0, 1.0], 'Y': -317.67876112264906}, 'Max': {'X': [0.0, 0.0, 0.0], 'Y': 28.555619356085405}}, 4: {'Min': {'X': [1.0, 1.0, 1.0, 1.0], 'Y': -2122.7194591156745}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': 84.6285327715325}}, 5: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -13119.507994444557}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 239.21883521731667}}, 6: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -76227.26541224848}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 651.6543524292763}}, 7: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -419119.0237792596}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1716.6124927943326}}, 8: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -2186908.5052382653}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 4378.370368544152}}, 9: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -3338956.456024179}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 5449.690103267646}}, 10: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': -4542990.759028133}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 6381.335445353284}}}, 'bratley': {2: {'Min': {'X': [0.0, 0.8296865015671976], 'Y': -0.0}, 'Max': {'X': [1.0, 0.0], 'Y': 1.0}}, 3: {'Min': {'X': [0.0, 0.28994321529254174, 0.8225198681688665], 'Y': 0.0}, 'Max': {'X': [1.0, 0.0, 0.20927204856783305], 'Y': 1.0}}, 4: {'Min': {'X': [0.0, 0.9730534130297082, 0.6901522242964541, 0.9494340982074285], 'Y': -0.0}, 'Max': {'X': [1.0, 0.20558054665710326, 1.0, 0.0], 'Y': 1.0}}, 5: {'Min': {'X': [0.04440196847147327, 1.0, 0.0, 0.9516392928704732, 0.15491461334183027], 'Y': 0.0}, 'Max': {'X': [1.0, 0.11517983075185582, 1.0, 0.46855490979490594, 1.0], 'Y': 1.0}}, 6: {'Min': {'X': [0.0, 0.8700410967892181, 0.08080677920444156, 0.3334274513181678, 0.7014026355438886, 0.31785491248929715], 'Y': 0.0}, 'Max': {'X': [1.0, 0.0, 0.8902692334406365, 0.6259412760388603, 0.14942748349799234, 0.3627529618290094], 'Y': 1.0}}, 7: {'Min': {'X': [0.0, 0.6484957047421588, 0.6671202747999857, 1.0, 0.21016301394321377, 0.28280606589020424, 0.5166102823560662], 'Y': 0.0}, 'Max': {'X': [1.0, 0.0, 0.6370875317485755, 0.5246189515345238, 0.32426694059206485, 0.4941401797075647, 0.054777395532335814], 'Y': 1.0}}, 8: {'Min': {'X': [0.0, 0.5267835522076139, 0.29582281515117304, 0.059503486155620615, 0.9720352687349179, 0.018748523857417133, 0.7429058727940134, 0.02285458016005052], 'Y': -0.0}, 'Max': {'X': [1.0, 0.0, 0.5385862614411416, 0.6963513766553978, 0.6203207062561205, 0.08742020691715649, 0.34078501607212514, 0.0], 'Y': 1.0}}, 9: {'Min': {'X': [0.0, 1.0, 0.7141719189632914, 1.0, 0.4231930185591029, 0.8676470500895594, 0.22142654609650025, 0.5917507458703394, 0.007292062166843281], 'Y': 0.0}, 'Max': {'X': [1.0, 0.0, 0.7935561742510376, 0.8328696011514446, 0.46123371332953333, 0.17325378325005952, 0.10536982905380221, 0.3460279421117975, 0.5485683952053918], 'Y': 1.0}}, 10: {'Min': {'X': [0.0, 0.5242904629462536, 0.7796137598224703, 0.926735983383926, 0.782557492971123, 0.7017217787679366, 0.748853691821476, 0.8268235356377361, 0.447268882337753, 0.8983352853734264], 'Y': 0.0}, 'Max': {'X': [1.0, 0.0, 0.4853373145772063, 0.807634894915589, 0.9670780628398649, 0.928607016951546, 0.6757270450982914, 0.3664459363161037, 0.8467813685631104, 0.48411256904144223], 'Y': 1.0}}}, 'roosArnold': {2: {'Min': {'X': [1.0, 0.0], 'Y': -4.0}, 'Max': {'X': [0.5, 0.4999999999975279], 'Y': -0.0}}, 3: {'Min': {'X': [0.0, 0.0, 1.0], 'Y': -8.0}, 'Max': {'X': [0.5000000000000117, 0.5000000000000003, 0.5], 'Y': 0.0}}, 4: {'Min': {'X': [1.0, 1.0, 0.0, 1.0], 'Y': -16.0}, 'Max': {'X': [0.5000000000008148, 0.5, 0.5000000000003316, 0.5000000000085308], 'Y': 0.0}}, 5: {'Min': {'X': [1.0, 0.0, 0.0, 1.0, 1.0], 'Y': -32.0}, 'Max': {'X': [0.49999999991329896, 0.4999999996818067, 0.5, 0.5000000000689301, 0.5000000000006667], 'Y': -0.0}}, 6: {'Min': {'X': [0.0, 0.0, 1.0, 1.0, 1.0, 0.0], 'Y': -64.0}, 'Max': {'X': [0.49999999999548084, 0.500000000001143, 0.4999999998827574, 0.5, 0.4999999993090419, 0.5000000000386483], 'Y': -0.0}}, 7: {'Min': {'X': [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0], 'Y': -128.0}, 'Max': {'X': [0.4999999999970641, 0.4999999999862216, 0.4999999999179408, 0.49999999999983374, 0.5, 0.4999999974913697, 0.5000000000005504], 'Y': -0.0}}, 8: {'Min': {'X': [0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0], 'Y': -256.0}, 'Max': {'X': [0.4999999995825142, 0.5000000205172269, 0.49999999647894483, 0.5000000275914748, 0.500000000044788, 0.5000000000001293, 0.49999999999640576, 0.5], 'Y': 0.0}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0], 'Y': -512.0}, 'Max': {'X': [0.5, 0.49999999877763296, 0.49999999991791433, 0.4999999824063727, 0.5000000061799391, 0.4999999997402727, 0.5000001360494206, 0.49999999996804767, 0.500000014328497], 'Y': 0.0}}, 10: {'Min': {'X': [0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0], 'Y': -1024.0}, 'Max': {'X': [0.5000000000164483, 0.5000000000002657, 0.5000000000065031, 0.5, 0.5000000000001651, 0.5000000000008713, 0.5000000002187186, 0.5000000011905379, 0.5000000000082883, 0.5000000001074393], 'Y': -0.0}}}, 'morokoffCaflisch': {2: {'Min': {'X': [0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0], 'Y': 2.25}}, 3: {'Min': {'X': [0.524599694703224, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0], 'Y': 2.37037037037037}}, 4: {'Min': {'X': [0.0, 0.3369334088606698, 0.18153342657142021, 0.0], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0], 'Y': 2.44140625}}, 5: {'Min': {'X': [0.0, 0.41831578974158334, 0.4631209941995778, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.4883199999999994}}, 6: {'Min': {'X': [0.0, 0.2473231673746062, 0.39891684522801896, 0.0, 0.0, 0.5409620183178888], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.5216263717421135}}, 7: {'Min': {'X': [0.4850698032342157, 0.7007068490171863, 0.6710106400519843, 0.4956968758216698, 0.624303387331756, 0.0, 0.10238501278586759], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.546499697040712}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.2536836656900325, 0.639418901315293, 0.3060348731151461, 0.28464410060758927, 0.0], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.565784513950348}}, 9: {'Min': {'X': [0.6536218992175713, 0.5151345645349771, 0.48484426899081756, 0.0, 0.8428339637809753, 0.0, 0.3900135483731004, 0.49080972130347433, 0.5216590780567061], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.5811747917131984}}, 10: {'Min': {'X': [0.3327467468621832, 0.3487611309763964, 0.37219723100304064, 0.0, 0.7989328558953126, 0.5663992876965354, 0.5213610455420513, 0.8640847230530215, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.5937424601000023}}}, 'continuousIntegrand': {2: {'Min': {'X': [1.0, 1.0], 'Y': 0.006737946999085467}, 'Max': {'X': [0.5, 0.5], 'Y': 1.0}}, 3: {'Min': {'X': [1.0, 0.0, 0.0], 'Y': 0.0005530843701478336}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': 1.0}}, 4: {'Min': {'X': [0.0, 1.0, 1.0, 0.0], 'Y': 4.5399929762484854e-05}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 5: {'Min': {'X': [1.0, 1.0, 0.0, 1.0, 1.0], 'Y': 3.726653172078671e-06}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 6: {'Min': {'X': [0.0, 0.0, 1.0, 1.0, 0.0, 1.0], 'Y': 3.059023205018258e-07}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 2.510999155743982e-08}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 2.061153622438558e-09}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.6918979226151304e-10}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.3887943864964021e-11}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}}, 'cornerPeakIntegrand': {2: {'Min': {'X': [1.0, 1.0], 'Y': 0.0007513148009015778}, 'Max': {'X': [0.0, 0.0], 'Y': 1.0}}, 3: {'Min': {'X': [1.0, 1.0, 1.0], 'Y': 1.52587890625e-05}, 'Max': {'X': [0.0, 0.0, 0.0], 'Y': 1.0}}, 4: {'Min': {'X': [1.0, 1.0, 1.0, 1.0], 'Y': 2.4485192702139343e-07}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}, 5: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 3.2371282973906776e-09}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}, 6: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 3.6346964194877556e-11}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}, 7: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 3.544704151217464e-13}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}, 8: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 3.0545362921480935e-15}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}, 9: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 2.3573370563685004e-17}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}, 10: {'Min': {'X': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'Y': 1.6471307040630568e-19}, 'Max': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.0}}}, 'discontinuousIntegrand': {2: {'Min': {'X': [0.09980005430426508, 0.5189378141709313], 'Y': 0.0}, 'Max': {'X': [0.5, 0.5], 'Y': 148.4131591025766}}, 3: {'Min': {'X': [0.8396465184516745, 0.6550241171638137, 0.9945836010730545], 'Y': 0.0}, 'Max': {'X': [0.5, 0.5, 0.9999971774853652], 'Y': 22026.15494688986}}, 4: {'Min': {'X': [0.8536479935346398, 0.7010529536866691, 0.3880533083067351, 0.325016766005207], 'Y': 0.0}, 'Max': {'X': [0.5, 0.5, 0.9999745973682873, 0.9999745973682873], 'Y': 3268187.061493245}}, 5: {'Min': {'X': [0.36062075479603817, 0.5341416092522857, 0.0, 0.0, 0.3938686064217909], 'Y': 0.0}, 'Max': {'X': [0.49999561734719217, 0.4999611223726408, 0.9999988112721718, 0.9998075189655076, 0.9998797244180793], 'Y': 484301933.8394958}}, 6: {'Min': {'X': [0.5353646411645787, 0.4790312724795256, 0.22353149785547044, 0.08617337262732716, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.4997920298076157, 0.49999378390306337, 0.9999486922102616, 0.999870762252991, 0.999991184604653, 0.9999493015576113], 'Y': 71841914900.29205}}, 7: {'Min': {'X': [0.9179364591348198, 0.29900059936906676, 0.0062622575949417, 0.39947215817279014, 0.34312510516577843, 0.30140379691520736, 0.2614479488017887], 'Y': 0.0}, 'Max': {'X': [0.49996664810951796, 0.499999993894686, 0.9999665566976952, 0.9999720965596279, 0.9999422002558433, 0.9999508069614669, 0.9995909765969653], 'Y': 10653892085719.232}}, 8: {'Min': {'X': [0.0, 0.5334903970060003, 0.27376904403602165, 0.0, 0.0, 0.3957911592815134, 0.0, 0.0], 'Y': 0.0}, 'Max': {'X': [0.49999999510030013, 0.49997900463918143, 0.9995355151614103, 0.9999875807123237, 0.9999685736331236, 0.9998182505317981, 0.9999324230768432, 0.9999339139104577], 'Y': 1579328708814356.8}}, 9: {'Min': {'X': [0.601768220081981, 0.4018244827736075, 0.47314869420188943, 0.7105455912774449, 0.9155273651219152, 0.26546594444117133, 0.746528885599678, 0.26840680088059665, 0.8290341334635212], 'Y': 0.0}, 'Max': {'X': [0.49999999757529673, 0.49994311272296277, 0.9998030162301368, 0.9997828248828822, 0.9999675368845966, 0.9999408745590699, 0.9998329465655209, 0.999926291185443, 0.9996392369551432], 'Y': 2.3401911332464755e+17}}, 10: {'Min': {'X': [0.4546722027789937, 0.8554450533977997, 0.47929903564032217, 0.7624149496572533, 0.599867380885929, 0.26251303049831587, 0.5362915314132909, 0.9883903884209339, 0.036389803219844086, 0.7696526485276656], 'Y': 0.0}, 'Max': {'X': [0.49998500792671097, 0.4999999955228524, 0.9999627226670147, 0.9999047536336743, 0.9996925481951964, 0.9996781274753475, 0.9998890564282505, 0.9999811376826526, 0.99981253153544, 0.9999786789357694], 'Y': 3.4739977950899433e+19}}}, 'gaussianPeak': {2: {'Min': {'X': [1.0, 1.0], 'Y': 3.726653172078671e-06}, 'Max': {'X': [0.5, 0.5], 'Y': 1.0}}, 3: {'Min': {'X': [1.0, 1.0, 0.0], 'Y': 7.194133030325383e-09}, 'Max': {'X': [0.5, 0.5, 0.5], 'Y': 1.0}}, 4: {'Min': {'X': [0.0, 1.0, 1.0, 1.0], 'Y': 1.3887943864964021e-11}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 5: {'Min': {'X': [1.0, 0.0, 0.0, 1.0, 0.0], 'Y': 2.6810038677818034e-14}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 6: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 5.175555005801869e-17}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 7: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 9.991171568224243e-20}, 'Max': {'X': [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5], 'Y': 1.0}}, 8: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 1.9287498479639178e-22}, 'Max': {'X': [0.49999999998703676, 0.49999999998703676, 0.49999999998703676, 0.49999999998703676, 0.49999999998703676, 0.49999999998703676, 0.49999999998703676, 0.49999999998703676], 'Y': 1.0}}, 9: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 3.7233631217505106e-25}, 'Max': {'X': [0.49999999998743666, 0.49999999998743666, 0.49999999998743666, 0.49999999998743666, 0.49999999998743666, 0.49999999998743666, 0.49999999998743666, 0.49999999998743666, 0.49999999998743666], 'Y': 1.0}}, 10: {'Min': {'X': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'Y': 7.187781739060989e-28}, 'Max': {'X': [0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105, 0.4999999999874105], 'Y': 1.0}}}}

    lowerBnd = dict[surrogate][dim]['Min']['Y']
    upperBnd = dict[surrogate][dim]['Max']['Y']

    return lowerBnd, upperBnd

def scaleY(surr, dim, y):
    lowerBnd, upperBnd = getBounds(surr, dim)
    Y = (y-lowerBnd) / (upperBnd - lowerBnd)
    return Y

def ackley(X, noise=0, normY=True):
    xrange = [-40, 40]
    xx = [xrange[0] + x*(xrange[1] - xrange[0]) for x in X]

    d = len(xx)
    c = 2 * math.pi
    b = 0.2
    a = 20

    sum1 = 0
    sum2 = 0
    for ii in range(d):
        xi = xx[ii]
        sum1 = sum1 + xi ** 2
        sum2 = sum2 + math.cos(c * xi)

    term1 = -a * math.exp(-b * math.sqrt(sum1 / d))
    term2 = -math.exp(sum2 / d)

    y = term1 + term2 + a + math.exp(1)
    y = -y
    if normY:
        y = scaleY('ackley', d, y)

    return y + noise*np.random.normal()

def griewank(X, noise=0, normY=True):
    xrange = [-600, 600]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)
    S = 0
    prod = 1

    for ii in range(d):
        xi = xx[ii]
        S = S + xi ** 2 / 4000
        prod = prod * math.cos(xi / math.sqrt(ii+1))

    y = S - prod + 1
    y = -y

    if normY:
        y = scaleY('griewank', d, y)

    return y + noise*np.random.normal()

def langermann(X, noise=0, normY=True):
    xrange = [0, 10]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    # Assumes 2D input
    #TODO: make n-dimensional
    m = 5
    c = [1, 2, 5, 2, 3]
    A = [[3, 5], [5, 2], [2, 1], [1, 4], [7, 9]]

    outer = 0
    for ii in range(m):
        inner = 0
        for jj in range(d):
            xj = xx[jj]
            Aij = A[ii][jj]
            inner = inner + (xj - Aij) ** 2
        new = c[ii] * math.exp(-inner / math.pi) * math.cos(math.pi * inner)
        outer = outer + new
    y = outer

    if normY:
        y = scaleY('langermann', d, y)

    return y + noise*np.random.normal()

def levy(X, noise=0, normY=True):
    xrange = [-10, 10]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    w = np.zeros((d, 1))
    for ii in range(d):
        w[ii] = 1 + (xx[ii] - 1) / 4

    term1 = (math.sin(math.pi * w[0])) ** 2
    term3 = (w[d-1] - 1) ** 2 * (1 + (math.sin(2 * math.pi * w[d-1])) ** 2)

    S = 0
    for ii in range(d):
        wi = w[ii]
        new = (wi - 1) ** 2 * (1 + 10 * (math.sin(math.pi * wi + 1)) ** 2)
        S = S + new

    y = term1 + S + term3
    y = y[0]
    y = -y

    if normY:
        y = scaleY('levy', d, y)

    return y + noise*np.random.normal()

def rastrigin(X, noise=0, normY=True):
    xrange = [-5.12, 5.12]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0
    for ii in range(d):
        xi = xx[ii]
        S = S + (xi ** 2 - 10 * math.cos(2 * math.pi * xi))

    y = 10 * d + S
    y = -y

    if normY:
        y = scaleY('rastrigin', d, y)

    return y + noise*np.random.normal()

def schwefel(X, noise=0, normY=True):
    xrange = [-500, 500]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0
    for ii in range(d):
        xi = xx[ii]
        S = S + xi * math.sin(math.sqrt(abs(xi)))

    y = 418.9829 * d - S
    y = -y

    if normY:
        y = scaleY('schwefel', d, y)

    return y + noise*np.random.normal()

def perm0db(X, noise=0, normY=True):
    d = len(X)
    xrange = [-d, d]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]

    b = 10

    outer = 0
    for ii in range(d):
        inner = 0
        for jj in range(d):
            xj = xx[jj]
            inner = inner + ((jj+1) + b) * (xj ** (ii+1) - (1 / (jj+1)) ** (ii+1))
        outer = outer + inner ** 2

    y = outer
    y = -y

    if normY:
        y = scaleY('perm0db', d, y)

    return y + noise*np.random.normal()

def rotatedHyperEllipsoid(X, noise=0, normY=True):
    xrange = [-65.536, 65.536]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    outer = 0

    for ii in range(d):
        inner = 0
        for jj in range(ii+1):
            xj = xx[jj]
            inner = inner + xj ** 2
        outer = outer + inner

    y = outer
    y = -y

    if normY:
        y = scaleY('rotatedHyperEllipsoid', d, y)

    return y + noise*np.random.normal()

def sphere(X, noise=0, normY=True):
    xrange = [-5.12, 5.12]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0
    for ii in range(d):
        xi = xx[ii]
        S = S + xi ** 2

    y = S
    y = -y

    if normY:
        y = scaleY('sphere', d, y)

    return y + noise*np.random.normal()

def sumDifferentPowers(X, noise=0, normY=True):
    xrange = [-1, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0

    for ii in range(d):
        xi = xx[ii]
        new = (abs(xi)) ** (ii + 2)
        S = S + new
    y = S
    y = -y

    if normY:
        y = scaleY('sumDifferentPowers', d, y)

    return y + noise*np.random.normal()

def trid(X, noise=0, normY=True):
    d = len(X)
    xrange = [-d**2, d**2]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]

    sum1 = (xx[0] - 1) ** 2
    sum2 = 0

    for ii in range(d):
        if ii != 0:
            xi = xx[ii]
            xold = xx[ii - 1]
            sum1 = sum1 + (xi - 1) ** 2
            sum2 = sum2 + xi * xold

    y = sum1 - sum2
    y = -y

    if normY:
        y = scaleY('trid', d, y)

    return y + noise*np.random.normal()

def powerSum(X, noise=0, normY=True):
    d = len(X)
    xrange = [0, d]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]

    #TODO: replace with actual recommended values
    b = [8, 18, 44, 114]

    outer = 0

    for ii in range(d):
        inner = 0
        for jj in range(d):
            xj = xx[jj]
            inner = inner + xj ** (ii + 1)
        outer = outer + (inner - b[ii]) ** 2

    y = outer

    if normY:
        y = scaleY('powerSum', d, y)

    return y + noise*np.random.normal()

def zakharov(X, noise=0, normY=True):
    xrange = [-10, 10]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    sum1 = 0
    sum2 = 0

    for ii in range(d):
        xi = xx[ii]
        sum1 = sum1 + xi ** 2
        sum2 = sum2 + 0.5 * ii * xi

    y = sum1 + sum2 ** 2 + sum2 ** 4
    y = -y

    if normY:
        y = scaleY('zakharov', d, y)

    return y + noise*np.random.normal()

def dixonPrice(X, noise=0, normY=True):
    xrange = [-10, 10]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    term1 = (xx[0] - 1) ** 2

    S = 0
    for ii in range(d):
        if ii != 0:
            xi = xx[ii]
            xold = xx[ii - 1]
            new = ii * (2 * xi ** 2 - xold) ** 2
            S = S + new

    y = term1 + S
    y = -y

    if normY:
        y = scaleY('dixonPrice', d, y)

    return y + noise*np.random.normal()

def rosenbrock(X, noise=0, normY=True):
    xrange = [-2.048, 2.048]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0
    for ii in range(d-1):
        xi = xx[ii]
        xnext = xx[ii + 1]
        new = 100 * (xnext - xi ** 2) ** 2 + (xi - 1) ** 2
        S = S + new

    y = S
    y = -y

    if normY:
        y = scaleY('rosenbrock', d, y)

    return y + noise*np.random.normal()

def michalewicz(X, noise=0, normY=True):
    xrange = [0, math.pi]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    m = 10

    S = 0

    for ii in range(d):
        xi = xx[ii]
        new = math.sin(xi) * (math.sin((ii+1) * xi ** 2 / math.pi)) ** (2 * m)
        S = S + new

    y = -S
    y = -y

    if normY:
        y = scaleY('michalewicz', d, y)

    return y + noise*np.random.normal()

def permdb(X, noise=0, normY=True):
    d = len(X)
    xrange = [-d, d]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]

    b = 0.5
    outer = 0

    for ii in range(d):
        inner = 0
        for jj in range(d):
            xj = xx[jj]
            inner = inner + ((jj+1) ** (ii+1) + b) * ((xj / (jj+1)) ** (ii+1) - 1)
        outer = outer + inner ** 2

    y = outer
    y = -y

    if normY:
        y = scaleY('permdb', d, y)

    return y + noise*np.random.normal()

def styblinskiTang(X, noise=0, normY=True):
    #TODO: cant find optimum of high dimensional functions
    xrange = [-5, 5]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0
    for ii in range(d):
        xi = xx[ii]
        new = xi ** 4 - 16 * xi ** 2 + 5 * xi
        S = S + new

    y = S / 2
    y = -y

    if normY:
        y = scaleY('styblinskiTang', d, y)

    return y + noise*np.random.normal()

def gfunction(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    a = np.zeros(d)
    for ii in range(d):
        a[ii] = (ii - 1) / 2

    prod = 1
    for ii in range(d):
        xi = xx[ii]
        ai = a[ii]
        new1 = abs(4 * xi - 2) + ai
        new2 = 1 + ai
        prod = prod * new1 / new2

    y = -prod

    if normY:
        y = scaleY('gfunction', d, y)

    return y + noise*np.random.normal()

def sobolLevitan(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    b = [2, 1.95, 1.9, 1.85, 1.8, 1.75, 1.7, 1.65, 0.4228, 0.3077, 0.2169, 0.1471, 0.0951, 0.0577, 0.0323,
         0.0161, 0.0068, 0.0021, 0.0004, 0]
    c0 = 0

    Id = 1
    for ii in range(d):
        bi = b[ii]
        new = (math.exp(bi) - 1) / bi
        Id = Id * new

    S = 0
    for ii in range(d):
        bi = b[ii]
        xi = xx[ii]
        S = S + bi * xi

    y = math.exp(S) - Id + c0
    y = -y

    if normY:
        y = scaleY('sobolLevitan', d, y)

    return y + noise*np.random.normal()

def bratley(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    S = 0

    for ii in range(d):
        prod = 1
        for jj in range(ii+1):
            xj = xx[jj]
            prod = prod * xj

        S = S + prod * (-1) ** (ii+1)

    y = S
    y = -y

    if normY:
        y = scaleY('bratley', d, y)

    return y + noise*np.random.normal()

def roosArnold(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    prod = 1
    for ii in range(d):
        xi = xx[ii]
        new = abs(4 * xi - 2)
        prod = prod * new


    y = prod
    y = -y

    if normY:
        y = scaleY('roosArnold', d, y)

    return y + noise*np.random.normal()

def morokoffCaflisch(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    fact1 = (1 + 1 / d) ** d

    prod = 1
    for ii in range(d):
        xi = xx[ii]
        prod = prod * xi ** (1 / d)

    y = fact1 * prod

    if normY:
        y = scaleY('morokoffCaflisch', d, y)

    return y + noise*np.random.normal()

def continuousIntegrand(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    u = np.tile(0.5, (1, d))[0]
    a = np.tile(5, (1, d))[0]

    S = 0
    for ii in range(d):
        xi = xx[ii]
        ai = a[ii]
        ui = u[ii]
        new = ai * abs(xi - ui)
        S = S + new

    y = math.exp(-S)

    if normY:
        y = scaleY('continuousIntegrand', d, y)

    return y + noise*np.random.normal()

def cornerPeakIntegrand(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    u = np.tile(0.5, (1, d))[0]
    a = np.tile(5, (1, d))[0]

    S = 0
    for ii in range(d):
        xi = xx[ii]
        ai = a[ii]
        S = S + ai * xi

    y = (1 + S) ** (-d - 1)

    if normY:
        y = scaleY('cornerPeakIntegrand', d, y)

    return y + noise*np.random.normal()

def discontinuousIntegrand(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    u = np.tile(0.5, (1, d))[0]
    a = np.tile(5, (1, d))[0]

    x1 = xx[0]
    x2 = xx[1]
    u1 = u[0]
    u2 = u[1]

    if (x1 > u1) or (x2 > u2):
        y = 0
    else:
        S = 0
        for ii in range(d):
            xi = xx[ii]
            ai = a[ii]
            S = S + ai * xi

        y = math.exp(S)

    if normY:
        y = scaleY('discontinuousIntegrand', d, y)

    return y + noise*np.random.normal()

def gaussianPeak(X, noise=0, normY=True):
    xrange = [0, 1]
    xx = [xrange[0] + x * (xrange[1] - xrange[0]) for x in X]
    d = len(xx)

    u = np.tile(0.5, (1, d))[0]
    a = np.tile(5, (1, d))[0]

    S = 0
    for ii in range(d):
        xi = xx[ii]
        ai = a[ii]
        ui = u[ii]
        new = ai ** 2 * (xi - ui) ** 2
        S = S + new

    y = math.exp(-S)

    if normY:
        y = scaleY('gaussianPeak', d, y)

    return y + noise*np.random.normal()